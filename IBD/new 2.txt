@Dao
interface EventDatabaseDao {

    @Insert
    suspend fun insert(night: Event)

    @Update
    suspend fun update(night: Event)

//    @Query("SELECT * from event_table")
//    suspend fun getAllEvents(): LiveData<List<Event>>
}

class ReportFragmentViewModel (
    val database: EventDatabaseDao,
    application: Application
) : AndroidViewModel(application){

   // private var event = MutableLiveData<Event?>()

    fun insertEvent(loc: String, data: String, tag: String, desc: String) {
        val event: Event = Event(location = loc, data = data, tag = tag, description = desc)
        viewModelScope.launch {
            database.insert(event)
        }
    }
}

package com.example.mc.navigationbar

import android.location.Address
import android.location.Geocoder
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ArrayAdapter
import android.widget.Button
import android.widget.EditText
import android.widget.Spinner
import android.widget.TextView
import androidx.activity.OnBackPressedCallback
import androidx.fragment.app.Fragment
import com.example.mc.R
import com.example.mc.database.EventDatabase
import com.example.mc.databinding.FragmentReportBinding
import androidx.databinding.DataBindingUtil
import androidx.lifecycle.ViewModelProvider
import com.google.android.gms.location.FusedLocationProviderClient
import com.google.android.gms.location.LocationServices
import java.time.LocalDate
import java.util.*

class ReportFragment : Fragment() {

    private var lat: Double = 0.0
    private var long: Double = 0.0

    lateinit var descriptionEt: EditText
    lateinit var spinnerEvents: Spinner
    lateinit var reportBtn: Button
    lateinit var addressTv: TextView

    private lateinit var fusedLocationClient: FusedLocationProviderClient

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setHasOptionsMenu(true)
        requireActivity().onBackPressedDispatcher.addCallback(
            this,
            object : OnBackPressedCallback(true) {
                override fun handleOnBackPressed() {
                    activity?.moveTaskToBack(true)
                }
            })

        fusedLocationClient = LocationServices.getFusedLocationProviderClient(requireContext())
    }

    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {

        val binding: FragmentReportBinding = DataBindingUtil.inflate(
            inflater, R.layout.fragment_report, container, false)


        val application = requireNotNull(this.activity).application
        val dataSource = EventDatabase.getInstance(application).eventDatabaseDao
        val viewModelFactory = ReportFragmentViewModelFactory(dataSource, application)

        // Inflate the layout for this fragment

        descriptionEt = binding.root.findViewById(R.id.description)
        spinnerEvents = binding.root.findViewById(R.id.spinner_events)
        reportBtn = binding.root.findViewById(R.id.reportBtn)
        addressTv = binding.root.findViewById(R.id.addressTv)


        reportBtn.isAllCaps = false
        ArrayAdapter.createFromResource(
            context!!, R.array.events, android.R.layout.simple_spinner_item
        ).also { adapter ->
            // Specify the layout to use when the list of choices appears
            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
            // Apply the adapter to the spinner
            spinnerEvents.adapter = adapter
        }

        fusedLocationClient.lastLocation
            .addOnCompleteListener { task ->
                if (task.isSuccessful) {
                    val location = task.result
                    lat = location.latitude
                    long = location.longitude
                    Log.d("TAG", lat.toString() + "long" + long.toString())
                    getAddressInfoLocation(lat, long)
                }
            }

        val reportViewModel =
            ViewModelProvider(
                this, viewModelFactory).get(ReportFragmentViewModel::class.java)

        reportBtn.setOnClickListener{
            reportViewModel.insertEvent(
                addressTv.text.toString(),
                LocalDate.now().toString(),
                spinnerEvents.id.toString(),
                descriptionEt.toString()
            )
        }

        binding.setLifecycleOwner(this)

        binding.sleepTrackerViewModel = reportViewModel
        return binding.root
    }

    private fun getAddressInfoLocation(lat: Double, long: Double) {
        val geocoder = Geocoder(requireContext(), Locale.getDefault())
        val addresses: List<Address> =
            geocoder.getFromLocation(lat, long, 1) as List<Address>
        val address = addresses[0]
        val addressText = address.getAddressLine(0)
        addressTv.text = addressText
    }

}